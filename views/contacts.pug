extends layout.pug

block content
    .container.map-fluid
        .row
            .col-md-6.border-end.p-4
                div#map-container(style="height:65vh; display: flex; justify-content: center; align-items: center;")
                    div#map(style="height:100%; width: 100%; max-width: 800px; border: 1px solid #ccc;")
                        script.
                            console.log("in map")
                            map = L.map('map').setView([51.505, -0.09], 13); // Set the center to London
                            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19, attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>' }).addTo(map);

    .container.contacts
        h1 Contact List
        a(href="/create") Create a new Contact!
        br
        table
            thead
                tr
                    th Name
                    th Phone
                    th Email
                    th Address
                    th Contact
            tbody
                each contact in contacts
                    tr
                        td: a(href="/"+contact.id) #{contact.title} #{contact.first_name} #{contact.last_name}
                        td #{contact.phone_number}
                        td #{contact.email_address}
                        td
                            | #{contact.street}, #{contact.city}, #{contact.state}, #{contact.zip}, #{contact.country}
                        td
                            input(type="checkbox", id="phone", name="phone", disabled="", checked=contact.contact_by_phone == 1)
                            label(for="phone") Phone
                            input(type="checkbox", id="email", name="email", disabled="", checked=contact.contact_by_email == 1)
                            label(for="email") Email
                            input(type="checkbox", id="mail", name="mail", disabled="", checked=contact.contact_by_mail == 1)
                            label(for="mail") Mail

        script.
            const addPlace = async () => {
                const label = document.querySelector("#label").value;
                const address = document.querySelector("#address").value;
                await axios.put('/places', { label: label, address: address });
                await loadPlaces();
            }

            const deletePlace = async (id) => {
                await axios.delete(`/places/${id}`);
                await loadPlaces();
            }

            (async () => {
                const response = await axios.get('/places');
                const tbody = document.querySelector('tbody');
                while (tbody.firstChild) {
                    tbody.removeChild(tbody.firstChild);
                }

                const on_row_click = (e) => {
                    let row = e.target;
                    if (e.target.tagName.toUpperCase() === 'TD') {
                        row = e.target.parentNode;
                    }
                    const lat = row.dataset.lat;
                    const lng = row.dataset.lng;
                    map.flyTo(new L.LatLng(lat, lng));
                };

                markers.forEach(marker => map.removeLayer(marker));
                markers = [];

                if(response && response.data && response.data.places){
                    for (const place of response.data.places) {
                        const tr = document.createElement('tr');
                        tr.dataset.lat = place.lat;
                        tr.dataset.lng = place.lng;
                        tr.onclick = on_row_click;
                        tr.innerHTML = `
                            <td>${place.label}</td>
                            <td>${place.address}</td>
                            <td>
                                <button class='btn btn-danger' onclick='deletePlace(${place.id})'>Delete</button>
                            </td>
                        `;
                        tbody.appendChild(tr);

                        if (place.lat && place.lng) {
                            const marker = L.marker([place.lat, place.lng]).addTo(map).bindPopup(`<b>${place.label}</b><br/>${place.address}`);
                            markers.push(marker);
                        }

                    }

                    const popup = response.data.places[response.data.places.length - 1];
                    if(popup && popup.lat && popup.lng){
                        map.flyTo([popup.lat,popup.lng], 10)
                    }
                }
            })();
